const bodyParser=require("body-parser"),express=require("express"),app=express(),shell=require("shelljs");app.use(bodyParser.urlencoded({extended:!1})),app.use(bodyParser.json()),app.use(function(req,res,next){res.setHeader("Access-Control-Allow-Origin","http://localhost:4200"),res.setHeader("Access-Control-Allow-Methods","GET, POST, OPTIONS, PUT, PATCH, DELETE"),res.setHeader("Access-Control-Allow-Headers","X-Requested-With,content-type"),res.setHeader("Access-Control-Allow-Credentials",!0),next()}),app.post("/crud",(req,res)=>{let resObject=[];if(req.body.params){let params=req.body.params;if(params.create)if(params.create.collection||resObject.push({code:"cr-error-01",message:"Required param: collection"}),params.create.objectToCreate||resObject.push({code:"cr-error-02",message:"Required param: objectToCreate"}),resObject.length<1)if(1==shell.find("./collections/"+params.create.collection).code){shell.mkdir("./collections/"+params.create.collection);for(let lim=params.create.objectToCreate.length,i=0;i<lim;i++)setTimeout(()=>{resObject.push(params.create.objectToCreate[i]),shell.exec("echo "+JSON.stringify(params.create.objectToCreate[i])+" >./collections/"+params.create.collection+Date.now())},10)}else for(let lim=params.create.objectToCreate.length,i=0;i<lim;i++)setTimeout(()=>{resObject.push(params.create.objectToCreate[i]),shell.exec("echo "+JSON.stringify(params.create.objectToCreate[i])+" >./collections/"+params.create.collection+"/"+Date.now())},10);else res.send(resObject);params.read&&(params.read.collection||resObject.push({code:"r-error-01",message:"Required param: collection"})),params.update&&console.log("Update"),params.delete&&console.log("Create")}else resObject.push({code:"c-error-01",message:"No params"});res.send(resObject)}),app.listen(3e3,()=>{console.log("Server running on port 3000")});